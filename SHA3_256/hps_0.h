#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'hps' in
 * file 'hps.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following master:
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'SHA_in0', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_IN0_'.
 * The prefix is the slave descriptor.
 */
#define SHA_IN0_COMPONENT_TYPE altera_avalon_pio
#define SHA_IN0_COMPONENT_NAME SHA_in0
#define SHA_IN0_BASE 0x0
#define SHA_IN0_SPAN 16
#define SHA_IN0_END 0xf
#define SHA_IN0_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_IN0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_IN0_CAPTURE 0
#define SHA_IN0_DATA_WIDTH 32
#define SHA_IN0_DO_TEST_BENCH_WIRING 0
#define SHA_IN0_DRIVEN_SIM_VALUE 0
#define SHA_IN0_EDGE_TYPE NONE
#define SHA_IN0_FREQ 50000000
#define SHA_IN0_HAS_IN 0
#define SHA_IN0_HAS_OUT 1
#define SHA_IN0_HAS_TRI 0
#define SHA_IN0_IRQ_TYPE NONE
#define SHA_IN0_RESET_VALUE 0

/*
 * Macros for device 'SHA_in1', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_IN1_'.
 * The prefix is the slave descriptor.
 */
#define SHA_IN1_COMPONENT_TYPE altera_avalon_pio
#define SHA_IN1_COMPONENT_NAME SHA_in1
#define SHA_IN1_BASE 0x20
#define SHA_IN1_SPAN 16
#define SHA_IN1_END 0x2f
#define SHA_IN1_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_IN1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_IN1_CAPTURE 0
#define SHA_IN1_DATA_WIDTH 32
#define SHA_IN1_DO_TEST_BENCH_WIRING 0
#define SHA_IN1_DRIVEN_SIM_VALUE 0
#define SHA_IN1_EDGE_TYPE NONE
#define SHA_IN1_FREQ 50000000
#define SHA_IN1_HAS_IN 0
#define SHA_IN1_HAS_OUT 1
#define SHA_IN1_HAS_TRI 0
#define SHA_IN1_IRQ_TYPE NONE
#define SHA_IN1_RESET_VALUE 0

/*
 * Macros for device 'SHA_in2', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_IN2_'.
 * The prefix is the slave descriptor.
 */
#define SHA_IN2_COMPONENT_TYPE altera_avalon_pio
#define SHA_IN2_COMPONENT_NAME SHA_in2
#define SHA_IN2_BASE 0x40
#define SHA_IN2_SPAN 16
#define SHA_IN2_END 0x4f
#define SHA_IN2_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_IN2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_IN2_CAPTURE 0
#define SHA_IN2_DATA_WIDTH 32
#define SHA_IN2_DO_TEST_BENCH_WIRING 0
#define SHA_IN2_DRIVEN_SIM_VALUE 0
#define SHA_IN2_EDGE_TYPE NONE
#define SHA_IN2_FREQ 50000000
#define SHA_IN2_HAS_IN 0
#define SHA_IN2_HAS_OUT 1
#define SHA_IN2_HAS_TRI 0
#define SHA_IN2_IRQ_TYPE NONE
#define SHA_IN2_RESET_VALUE 0

/*
 * Macros for device 'SHA_in3', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_IN3_'.
 * The prefix is the slave descriptor.
 */
#define SHA_IN3_COMPONENT_TYPE altera_avalon_pio
#define SHA_IN3_COMPONENT_NAME SHA_in3
#define SHA_IN3_BASE 0x60
#define SHA_IN3_SPAN 16
#define SHA_IN3_END 0x6f
#define SHA_IN3_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_IN3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_IN3_CAPTURE 0
#define SHA_IN3_DATA_WIDTH 32
#define SHA_IN3_DO_TEST_BENCH_WIRING 0
#define SHA_IN3_DRIVEN_SIM_VALUE 0
#define SHA_IN3_EDGE_TYPE NONE
#define SHA_IN3_FREQ 50000000
#define SHA_IN3_HAS_IN 0
#define SHA_IN3_HAS_OUT 1
#define SHA_IN3_HAS_TRI 0
#define SHA_IN3_IRQ_TYPE NONE
#define SHA_IN3_RESET_VALUE 0

/*
 * Macros for device 'SHA_in4', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_IN4_'.
 * The prefix is the slave descriptor.
 */
#define SHA_IN4_COMPONENT_TYPE altera_avalon_pio
#define SHA_IN4_COMPONENT_NAME SHA_in4
#define SHA_IN4_BASE 0x80
#define SHA_IN4_SPAN 16
#define SHA_IN4_END 0x8f
#define SHA_IN4_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_IN4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_IN4_CAPTURE 0
#define SHA_IN4_DATA_WIDTH 32
#define SHA_IN4_DO_TEST_BENCH_WIRING 0
#define SHA_IN4_DRIVEN_SIM_VALUE 0
#define SHA_IN4_EDGE_TYPE NONE
#define SHA_IN4_FREQ 50000000
#define SHA_IN4_HAS_IN 0
#define SHA_IN4_HAS_OUT 1
#define SHA_IN4_HAS_TRI 0
#define SHA_IN4_IRQ_TYPE NONE
#define SHA_IN4_RESET_VALUE 0

/*
 * Macros for device 'SHA_in5', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_IN5_'.
 * The prefix is the slave descriptor.
 */
#define SHA_IN5_COMPONENT_TYPE altera_avalon_pio
#define SHA_IN5_COMPONENT_NAME SHA_in5
#define SHA_IN5_BASE 0xa0
#define SHA_IN5_SPAN 16
#define SHA_IN5_END 0xaf
#define SHA_IN5_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_IN5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_IN5_CAPTURE 0
#define SHA_IN5_DATA_WIDTH 32
#define SHA_IN5_DO_TEST_BENCH_WIRING 0
#define SHA_IN5_DRIVEN_SIM_VALUE 0
#define SHA_IN5_EDGE_TYPE NONE
#define SHA_IN5_FREQ 50000000
#define SHA_IN5_HAS_IN 0
#define SHA_IN5_HAS_OUT 1
#define SHA_IN5_HAS_TRI 0
#define SHA_IN5_IRQ_TYPE NONE
#define SHA_IN5_RESET_VALUE 0

/*
 * Macros for device 'SHA_in6', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_IN6_'.
 * The prefix is the slave descriptor.
 */
#define SHA_IN6_COMPONENT_TYPE altera_avalon_pio
#define SHA_IN6_COMPONENT_NAME SHA_in6
#define SHA_IN6_BASE 0xc0
#define SHA_IN6_SPAN 16
#define SHA_IN6_END 0xcf
#define SHA_IN6_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_IN6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_IN6_CAPTURE 0
#define SHA_IN6_DATA_WIDTH 32
#define SHA_IN6_DO_TEST_BENCH_WIRING 0
#define SHA_IN6_DRIVEN_SIM_VALUE 0
#define SHA_IN6_EDGE_TYPE NONE
#define SHA_IN6_FREQ 50000000
#define SHA_IN6_HAS_IN 0
#define SHA_IN6_HAS_OUT 1
#define SHA_IN6_HAS_TRI 0
#define SHA_IN6_IRQ_TYPE NONE
#define SHA_IN6_RESET_VALUE 0

/*
 * Macros for device 'SHA_in7', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_IN7_'.
 * The prefix is the slave descriptor.
 */
#define SHA_IN7_COMPONENT_TYPE altera_avalon_pio
#define SHA_IN7_COMPONENT_NAME SHA_in7
#define SHA_IN7_BASE 0xe0
#define SHA_IN7_SPAN 16
#define SHA_IN7_END 0xef
#define SHA_IN7_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_IN7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_IN7_CAPTURE 0
#define SHA_IN7_DATA_WIDTH 32
#define SHA_IN7_DO_TEST_BENCH_WIRING 0
#define SHA_IN7_DRIVEN_SIM_VALUE 0
#define SHA_IN7_EDGE_TYPE NONE
#define SHA_IN7_FREQ 50000000
#define SHA_IN7_HAS_IN 0
#define SHA_IN7_HAS_OUT 1
#define SHA_IN7_HAS_TRI 0
#define SHA_IN7_IRQ_TYPE NONE
#define SHA_IN7_RESET_VALUE 0

/*
 * Macros for device 'SHA_out0', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_OUT0_'.
 * The prefix is the slave descriptor.
 */
#define SHA_OUT0_COMPONENT_TYPE altera_avalon_pio
#define SHA_OUT0_COMPONENT_NAME SHA_out0
#define SHA_OUT0_BASE 0x100
#define SHA_OUT0_SPAN 16
#define SHA_OUT0_END 0x10f
#define SHA_OUT0_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_OUT0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_OUT0_CAPTURE 0
#define SHA_OUT0_DATA_WIDTH 32
#define SHA_OUT0_DO_TEST_BENCH_WIRING 0
#define SHA_OUT0_DRIVEN_SIM_VALUE 0
#define SHA_OUT0_EDGE_TYPE NONE
#define SHA_OUT0_FREQ 50000000
#define SHA_OUT0_HAS_IN 1
#define SHA_OUT0_HAS_OUT 0
#define SHA_OUT0_HAS_TRI 0
#define SHA_OUT0_IRQ_TYPE NONE
#define SHA_OUT0_RESET_VALUE 0

/*
 * Macros for device 'SHA_out1', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_OUT1_'.
 * The prefix is the slave descriptor.
 */
#define SHA_OUT1_COMPONENT_TYPE altera_avalon_pio
#define SHA_OUT1_COMPONENT_NAME SHA_out1
#define SHA_OUT1_BASE 0x120
#define SHA_OUT1_SPAN 16
#define SHA_OUT1_END 0x12f
#define SHA_OUT1_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_OUT1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_OUT1_CAPTURE 0
#define SHA_OUT1_DATA_WIDTH 32
#define SHA_OUT1_DO_TEST_BENCH_WIRING 0
#define SHA_OUT1_DRIVEN_SIM_VALUE 0
#define SHA_OUT1_EDGE_TYPE NONE
#define SHA_OUT1_FREQ 50000000
#define SHA_OUT1_HAS_IN 1
#define SHA_OUT1_HAS_OUT 0
#define SHA_OUT1_HAS_TRI 0
#define SHA_OUT1_IRQ_TYPE NONE
#define SHA_OUT1_RESET_VALUE 0

/*
 * Macros for device 'SHA_out2', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_OUT2_'.
 * The prefix is the slave descriptor.
 */
#define SHA_OUT2_COMPONENT_TYPE altera_avalon_pio
#define SHA_OUT2_COMPONENT_NAME SHA_out2
#define SHA_OUT2_BASE 0x140
#define SHA_OUT2_SPAN 16
#define SHA_OUT2_END 0x14f
#define SHA_OUT2_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_OUT2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_OUT2_CAPTURE 0
#define SHA_OUT2_DATA_WIDTH 32
#define SHA_OUT2_DO_TEST_BENCH_WIRING 0
#define SHA_OUT2_DRIVEN_SIM_VALUE 0
#define SHA_OUT2_EDGE_TYPE NONE
#define SHA_OUT2_FREQ 50000000
#define SHA_OUT2_HAS_IN 1
#define SHA_OUT2_HAS_OUT 0
#define SHA_OUT2_HAS_TRI 0
#define SHA_OUT2_IRQ_TYPE NONE
#define SHA_OUT2_RESET_VALUE 0

/*
 * Macros for device 'SHA_out3', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_OUT3_'.
 * The prefix is the slave descriptor.
 */
#define SHA_OUT3_COMPONENT_TYPE altera_avalon_pio
#define SHA_OUT3_COMPONENT_NAME SHA_out3
#define SHA_OUT3_BASE 0x160
#define SHA_OUT3_SPAN 16
#define SHA_OUT3_END 0x16f
#define SHA_OUT3_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_OUT3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_OUT3_CAPTURE 0
#define SHA_OUT3_DATA_WIDTH 32
#define SHA_OUT3_DO_TEST_BENCH_WIRING 0
#define SHA_OUT3_DRIVEN_SIM_VALUE 0
#define SHA_OUT3_EDGE_TYPE NONE
#define SHA_OUT3_FREQ 50000000
#define SHA_OUT3_HAS_IN 1
#define SHA_OUT3_HAS_OUT 0
#define SHA_OUT3_HAS_TRI 0
#define SHA_OUT3_IRQ_TYPE NONE
#define SHA_OUT3_RESET_VALUE 0

/*
 * Macros for device 'SHA_out4', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_OUT4_'.
 * The prefix is the slave descriptor.
 */
#define SHA_OUT4_COMPONENT_TYPE altera_avalon_pio
#define SHA_OUT4_COMPONENT_NAME SHA_out4
#define SHA_OUT4_BASE 0x180
#define SHA_OUT4_SPAN 16
#define SHA_OUT4_END 0x18f
#define SHA_OUT4_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_OUT4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_OUT4_CAPTURE 0
#define SHA_OUT4_DATA_WIDTH 32
#define SHA_OUT4_DO_TEST_BENCH_WIRING 0
#define SHA_OUT4_DRIVEN_SIM_VALUE 0
#define SHA_OUT4_EDGE_TYPE NONE
#define SHA_OUT4_FREQ 50000000
#define SHA_OUT4_HAS_IN 1
#define SHA_OUT4_HAS_OUT 0
#define SHA_OUT4_HAS_TRI 0
#define SHA_OUT4_IRQ_TYPE NONE
#define SHA_OUT4_RESET_VALUE 0

/*
 * Macros for device 'SHA_out5', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_OUT5_'.
 * The prefix is the slave descriptor.
 */
#define SHA_OUT5_COMPONENT_TYPE altera_avalon_pio
#define SHA_OUT5_COMPONENT_NAME SHA_out5
#define SHA_OUT5_BASE 0x1a0
#define SHA_OUT5_SPAN 16
#define SHA_OUT5_END 0x1af
#define SHA_OUT5_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_OUT5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_OUT5_CAPTURE 0
#define SHA_OUT5_DATA_WIDTH 32
#define SHA_OUT5_DO_TEST_BENCH_WIRING 0
#define SHA_OUT5_DRIVEN_SIM_VALUE 0
#define SHA_OUT5_EDGE_TYPE NONE
#define SHA_OUT5_FREQ 50000000
#define SHA_OUT5_HAS_IN 1
#define SHA_OUT5_HAS_OUT 0
#define SHA_OUT5_HAS_TRI 0
#define SHA_OUT5_IRQ_TYPE NONE
#define SHA_OUT5_RESET_VALUE 0

/*
 * Macros for device 'SHA_out6', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_OUT6_'.
 * The prefix is the slave descriptor.
 */
#define SHA_OUT6_COMPONENT_TYPE altera_avalon_pio
#define SHA_OUT6_COMPONENT_NAME SHA_out6
#define SHA_OUT6_BASE 0x1c0
#define SHA_OUT6_SPAN 16
#define SHA_OUT6_END 0x1cf
#define SHA_OUT6_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_OUT6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_OUT6_CAPTURE 0
#define SHA_OUT6_DATA_WIDTH 32
#define SHA_OUT6_DO_TEST_BENCH_WIRING 0
#define SHA_OUT6_DRIVEN_SIM_VALUE 0
#define SHA_OUT6_EDGE_TYPE NONE
#define SHA_OUT6_FREQ 50000000
#define SHA_OUT6_HAS_IN 1
#define SHA_OUT6_HAS_OUT 0
#define SHA_OUT6_HAS_TRI 0
#define SHA_OUT6_IRQ_TYPE NONE
#define SHA_OUT6_RESET_VALUE 0

/*
 * Macros for device 'SHA_out7', class 'altera_avalon_pio'
 * The macros are prefixed with 'SHA_OUT7_'.
 * The prefix is the slave descriptor.
 */
#define SHA_OUT7_COMPONENT_TYPE altera_avalon_pio
#define SHA_OUT7_COMPONENT_NAME SHA_out7
#define SHA_OUT7_BASE 0x1e0
#define SHA_OUT7_SPAN 16
#define SHA_OUT7_END 0x1ef
#define SHA_OUT7_BIT_CLEARING_EDGE_REGISTER 0
#define SHA_OUT7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SHA_OUT7_CAPTURE 0
#define SHA_OUT7_DATA_WIDTH 32
#define SHA_OUT7_DO_TEST_BENCH_WIRING 0
#define SHA_OUT7_DRIVEN_SIM_VALUE 0
#define SHA_OUT7_EDGE_TYPE NONE
#define SHA_OUT7_FREQ 50000000
#define SHA_OUT7_HAS_IN 1
#define SHA_OUT7_HAS_OUT 0
#define SHA_OUT7_HAS_TRI 0
#define SHA_OUT7_IRQ_TYPE NONE
#define SHA_OUT7_RESET_VALUE 0

/*
 * Macros for device 'round_const0', class 'altera_avalon_pio'
 * The macros are prefixed with 'ROUND_CONST0_'.
 * The prefix is the slave descriptor.
 */
#define ROUND_CONST0_COMPONENT_TYPE altera_avalon_pio
#define ROUND_CONST0_COMPONENT_NAME round_const0
#define ROUND_CONST0_BASE 0x200
#define ROUND_CONST0_SPAN 16
#define ROUND_CONST0_END 0x20f
#define ROUND_CONST0_BIT_CLEARING_EDGE_REGISTER 0
#define ROUND_CONST0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ROUND_CONST0_CAPTURE 0
#define ROUND_CONST0_DATA_WIDTH 32
#define ROUND_CONST0_DO_TEST_BENCH_WIRING 0
#define ROUND_CONST0_DRIVEN_SIM_VALUE 0
#define ROUND_CONST0_EDGE_TYPE NONE
#define ROUND_CONST0_FREQ 50000000
#define ROUND_CONST0_HAS_IN 0
#define ROUND_CONST0_HAS_OUT 1
#define ROUND_CONST0_HAS_TRI 0
#define ROUND_CONST0_IRQ_TYPE NONE
#define ROUND_CONST0_RESET_VALUE 0

/*
 * Macros for device 'round_const1', class 'altera_avalon_pio'
 * The macros are prefixed with 'ROUND_CONST1_'.
 * The prefix is the slave descriptor.
 */
#define ROUND_CONST1_COMPONENT_TYPE altera_avalon_pio
#define ROUND_CONST1_COMPONENT_NAME round_const1
#define ROUND_CONST1_BASE 0x220
#define ROUND_CONST1_SPAN 16
#define ROUND_CONST1_END 0x22f
#define ROUND_CONST1_BIT_CLEARING_EDGE_REGISTER 0
#define ROUND_CONST1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ROUND_CONST1_CAPTURE 0
#define ROUND_CONST1_DATA_WIDTH 32
#define ROUND_CONST1_DO_TEST_BENCH_WIRING 0
#define ROUND_CONST1_DRIVEN_SIM_VALUE 0
#define ROUND_CONST1_EDGE_TYPE NONE
#define ROUND_CONST1_FREQ 50000000
#define ROUND_CONST1_HAS_IN 0
#define ROUND_CONST1_HAS_OUT 1
#define ROUND_CONST1_HAS_TRI 0
#define ROUND_CONST1_IRQ_TYPE NONE
#define ROUND_CONST1_RESET_VALUE 0

/*
 * Macros for device 'flag_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'FLAG_OUT_'.
 * The prefix is the slave descriptor.
 */
#define FLAG_OUT_COMPONENT_TYPE altera_avalon_pio
#define FLAG_OUT_COMPONENT_NAME flag_out
#define FLAG_OUT_BASE 0x240
#define FLAG_OUT_SPAN 16
#define FLAG_OUT_END 0x24f
#define FLAG_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define FLAG_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FLAG_OUT_CAPTURE 0
#define FLAG_OUT_DATA_WIDTH 1
#define FLAG_OUT_DO_TEST_BENCH_WIRING 0
#define FLAG_OUT_DRIVEN_SIM_VALUE 0
#define FLAG_OUT_EDGE_TYPE NONE
#define FLAG_OUT_FREQ 50000000
#define FLAG_OUT_HAS_IN 0
#define FLAG_OUT_HAS_OUT 1
#define FLAG_OUT_HAS_TRI 0
#define FLAG_OUT_IRQ_TYPE NONE
#define FLAG_OUT_RESET_VALUE 0

/*
 * Macros for device 'flag_in', class 'altera_avalon_pio'
 * The macros are prefixed with 'FLAG_IN_'.
 * The prefix is the slave descriptor.
 */
#define FLAG_IN_COMPONENT_TYPE altera_avalon_pio
#define FLAG_IN_COMPONENT_NAME flag_in
#define FLAG_IN_BASE 0x260
#define FLAG_IN_SPAN 16
#define FLAG_IN_END 0x26f
#define FLAG_IN_BIT_CLEARING_EDGE_REGISTER 0
#define FLAG_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FLAG_IN_CAPTURE 0
#define FLAG_IN_DATA_WIDTH 1
#define FLAG_IN_DO_TEST_BENCH_WIRING 0
#define FLAG_IN_DRIVEN_SIM_VALUE 0
#define FLAG_IN_EDGE_TYPE NONE
#define FLAG_IN_FREQ 50000000
#define FLAG_IN_HAS_IN 1
#define FLAG_IN_HAS_OUT 0
#define FLAG_IN_HAS_TRI 0
#define FLAG_IN_IRQ_TYPE NONE
#define FLAG_IN_RESET_VALUE 0


#endif /* _ALTERA_HPS_0_H_ */
